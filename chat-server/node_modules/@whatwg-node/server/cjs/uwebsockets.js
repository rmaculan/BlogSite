"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendResponseToUwsOpts = exports.getRequestFromUWSRequest = exports.isUWSResponse = void 0;
function isUWSResponse(res) {
    return !!res.onData;
}
exports.isUWSResponse = isUWSResponse;
class UWSAbortSignal extends EventTarget {
    throwIfAborted() {
        if (this.aborted) {
            throw new DOMException('Aborted', 'AbortError');
        }
    }
    constructor(res) {
        super();
        this.aborted = false;
        this._onabort = null;
        res.onAborted(() => {
            this.aborted = true;
            this.dispatchEvent(new Event('request aborted'));
        });
    }
    get onabort() {
        return this._onabort;
    }
    set onabort(value) {
        this._onabort = value;
        if (value) {
            this.addEventListener('request aborted', value);
        }
        else {
            this.removeEventListener('request aborted', value);
        }
    }
}
function getRequestFromUWSRequest({ req, res, fetchAPI }) {
    let body;
    const method = req.getMethod();
    if (method !== 'get' && method !== 'head') {
        body = new fetchAPI.ReadableStream({});
        const readable = body.readable;
        res.onAborted(() => {
            readable.push(null);
        });
        let multipleChunks = false;
        res.onData(function (ab, isLast) {
            const chunk = Buffer.from(ab, 0, ab.byteLength);
            if (!multipleChunks && isLast) {
                readable.push(chunk);
            }
            else {
                readable.push(Buffer.concat([chunk]));
            }
            if (isLast) {
                readable.push(null);
            }
            multipleChunks = true;
        });
    }
    const headers = new fetchAPI.Headers();
    req.forEach((key, value) => {
        headers.set(key, value);
    });
    const url = `http://localhost${req.getUrl()}`;
    return new fetchAPI.Request(url, {
        method,
        headers,
        body: body,
        signal: new UWSAbortSignal(res),
    });
}
exports.getRequestFromUWSRequest = getRequestFromUWSRequest;
async function sendResponseToUwsOpts({ res, response }) {
    let resAborted = false;
    res.onAborted(function () {
        resAborted = true;
    });
    const isStringOrBuffer = response.bodyType === 'String' || response.bodyType === 'Uint8Array';
    res.cork(() => {
        res.writeStatus(`${response.status} ${response.statusText}`);
        for (const [key, value] of response.headers) {
            // content-length causes an error with Node.js's fetch
            if (key !== 'content-length') {
                if (key === 'set-cookie') {
                    const setCookies = response.headers.getSetCookie?.();
                    if (setCookies) {
                        for (const setCookie of setCookies) {
                            res.writeHeader(key, setCookie);
                        }
                        continue;
                    }
                }
                res.writeHeader(key, value);
            }
        }
        if (isStringOrBuffer) {
            res.end(response.bodyInit);
        }
    });
    if (isStringOrBuffer) {
        return;
    }
    if (!response.body) {
        res.end();
        return;
    }
    for await (const chunk of response.body) {
        if (resAborted) {
            return;
        }
        res.cork(() => {
            res.write(chunk);
        });
    }
    res.cork(() => {
        res.end();
    });
}
exports.sendResponseToUwsOpts = sendResponseToUwsOpts;
